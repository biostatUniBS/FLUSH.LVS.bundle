/*********************************************************************
 **
 ** file: lvs_rlm_se.c
 **
 ** based on rlm_se.c from Ben Bolstad's affyPLM library (version 1.4.0)
 **
 ** Aim: implement computation of standard errors for robust linear models.
 **
 ** Copyright (C) 2003-2004 Ben Bolstad
 **
 ** created on: May 10, 2007
 **
 ** Last modified: May 10, 2007
 **
 ** See the original rlm_se.c file for more information
 **  
 ** In particular we implement functions
 ** lvs_RLM_SE_Method_1 (6.5)
 ** lvs_RLM_SE_Method_2 (6.6) (<- make default?)
 ** lvs_RLM_SE_Method_3 (6.7)

 ** 17 May 2007: looks like the default method is se.type=4
 ** lvs_RLM_SE_Method_4 (weighted regression method)
 **
 ********************************************************************/

#include "basic_fns.h"
#include "lvs_matrix_functions.h"
#include "externals.h"
#include "lvs_rlm_se.h"

#include <R_ext/Rdynload.h>
#include <R.h>
#include <Rdefines.h>
#include <Rmath.h>
#include <Rinternals.h>





/*********************************************************************
 **
 ** void lvs_rlm_compute_se(double *X,double *Y, int n, int p, double *beta, double *resids,double *weights,double *se_estimates, int method)
 **
 ** given a robust linear model fit to data, compute the standard errors of the parameter estimates
 **
 ** double *X
 ** double *Y
 ** int n
 ** int p
 ** double *beta
 ** double *resids
 ** double *weights
 ** double *se_estimates
 ** int method
 **
 **
 **
 **
 **
 ** Note that we compute Kappa using a simplification for Huber Psi
 **
 ** ie Kappa = 1 + p/n* var(psi')/(E psi')^2
 **
 ** simplifies to
 **
 ** Kappa = 1 + p*(1-m)/(n*m)
 **
 ** where m is the proportion of psi' = 1 (ie the unwinsorized observations)
 **
 ** note that W_jk = sum_i (psi'(r_i)*x_{ij}*x_{ik}) ie a weighted form of XTX
 ** 
 **  
 ** 
 **
 **
 *********************************************************************/



void lvs_rlm_compute_se(double *X,double *Y, int n, int p, double *beta, double *resids,
			double *weights,  
			double *residSE, double *stddev, double *out_X,
			int start_p, int n_b, int use_cov, int use_w)
{

  int i,j,k;

  double RMSEw = 0.0;
  double Kappa = 0.0;

  double *XTX = Calloc(p*p,double);
  


  for (i=0; i < n; i++)
    {
      RMSEw+= weights[i]*resids[i]*resids[i];
    }
  
  RMSEw = sqrt(RMSEw/(double)(n-p));
  
  residSE[0] =  RMSEw;
  
  for (j =0; j < p;j++)
    {
      for (k=0; k < p; k++){
	XTX[k*p + j] = 0.0;
	for (i=0; i < n; i++){
	  XTX[k*p + j]+=  weights[i]*X[j*n +i]*X[k*n + i];
	}
      }
    }
  
  
  Kappa = RMSEw*RMSEw;
  
  estimate_X(beta, start_p, n_b, p, XTX, Kappa, use_cov, out_X);
  
  Free(XTX);
}


void lvs_rlm_compute_se_R(double *X,double *Y, int *n, int *p, double *beta, double *resids,
			  double *weights, double *residSE,
			  double *stddev, double *out_X,  int *start_p,
			  int *n_b, int *use_cov, int *use_w)
{
  lvs_rlm_compute_se(X, Y, *n, *p, beta, resids, weights, residSE,
		     stddev, out_X, *start_p, *n_b, *use_cov,*use_w);
  
}


void estimate_X(double *beta, int start_p, int n_b, int p, double *XTX, double Kappa, 
		int use_cov, double *out_X)
{
  int i = 0;
  int j = 0;
  int end_p = 0.0;
  
  out_X[0] = 0.0;

  /* to avoid thinking in terms of [0] first pointer in R code*/
  start_p = start_p - 1; /* position first beta sample*/
  end_p = start_p + n_b ; /* position last beta sample. n_b = number betas for sample*/

  if(use_cov)
    for(i = start_p; i < end_p ; i++)
      {
	for(j=start_p; j < end_p; j++)
	  for(i=start_p; i < end_p ; i++)
	    out_X[0] += (beta[i]*XTX[i+p*j]*beta[j]) / Kappa;
      }
  else
    for(i = start_p; i < end_p ; i++)
      {
	out_X[0] += (beta[i]*beta[i]* XTX[i*p + i]) / Kappa;
      }
}

void estimate_X_R(double *beta, int *start_p, int *n_b, int *p, double *XTX, double *Kappa,
		  int *use_cov, double *out_X)
{
  estimate_X(beta, *start_p, *n_b, *p, XTX, *Kappa, *use_cov, out_X);
}
